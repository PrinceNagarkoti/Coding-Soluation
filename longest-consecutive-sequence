//Soluation1-> o(nlogn)--->Time Complexity
import java.util.Arrays;

class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        Arrays.sort(nums);
        
        int max = 1;
        int count = 1;
        
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                continue;
            }
            
            if (nums[i] == nums[i - 1] + 1) {
                count++;
            } else {
                count = 1; 
            }
            
            max = Math.max(max, count);
        }
        
        return max;
    }
}

//Soluation2-> o(n)--->Time Complexity
class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> numSet = new HashSet<>();
        for (int num : nums) {
            numSet.add(num);
        }
        int max = 0;
        for (int num : numSet) {
            if (!numSet.contains(num - 1)) {
                int currentNum = num;
                int count = 1;
                while (numSet.contains(currentNum + 1)) {
                    currentNum++;
                    count++;
                }
                max = Math.max(max, count);
            }
        }
        return max;
    }
}
